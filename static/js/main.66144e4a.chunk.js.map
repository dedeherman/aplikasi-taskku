{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","role","aria-label","InfoBar","taskNumber","TaskAdder","setTasks","tasks","useState","currentValue","setCurrentValue","className","TextField","value","onChange","event","target","label","variant","Button","color","disabled","onClick","newTask","id","length","message","handleAddTask","Task","style","display","startIcon","updatedTasks","filter","task","handleDelete","TaskList","map","index","key","TaskApp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2SA+BMA,G,MAAS,WACb,OAAO,8CACL,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,mBAOEC,EAAU,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACjB,OAAO,oCAAUA,EAAV,2BAMHC,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EAEDC,mBAAS,IAFR,mBAElCC,EAFkC,KAEpBC,EAFoB,KAkBzC,OAAO,yBAAKC,UAAU,cAEpB,kBAACC,EAAA,EAAD,CACEC,MAAOJ,EAEPK,SAAU,SAAAC,GAAK,OAAIL,EAAgBK,EAAMC,OAAOH,QAChDI,MAAM,cACNC,QAAQ,aAEV,kBAACC,EAAA,EAAD,CACED,QAAQ,YACRE,MAAM,UAENC,SAA2B,KAAjBZ,EAEVa,QAAS,kBA3BS,WAEpB,IAAMC,EAAU,CACdC,GAAIjB,EAAMkB,OAAS,EACnBC,QAASjB,GAGXH,EAAS,GAAD,mBAAKC,GAAL,CAAYgB,KAEpBb,EAAgB,IAkBCiB,KANjB,YAeEC,EAAO,SAAC,GAAsC,IAApCF,EAAmC,EAAnCA,QAASF,EAA0B,EAA1BA,GAAIlB,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAWrC,OAAO,yBAAKI,UAAU,kBACpB,yBAAKA,UAAU,QACb,yBAAKkB,MAAO,CAAEC,QAAS,iBACpBJ,GAEH,kBAACP,EAAA,EAAD,CACED,QAAQ,YACRE,MAAM,YACNW,UAAW,kBAAC,IAAD,MACXT,QAAS,kBAhBM,WAGnB,IAAMU,EAAezB,EAAM0B,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KAEtDlB,EAAS0B,GAWUG,KAJjB,aAeAC,EAAW,SAAC,GAAyB,IAAvB7B,EAAsB,EAAtBA,MAAOD,EAAe,EAAfA,SAGzB,OAAOC,EAAM8B,KAAI,SAACH,EAAMI,GACtB,OAAO,kBAAC,EAAD,CAAMZ,QAASQ,EAAKR,QAASF,GAAIU,EAAKV,GAAIlB,SAAUA,EAAUC,MAAOA,EAAOgC,IAAKD,QAItFE,EAAU,WAAM,MAGMhC,mBAAS,IAHf,mBAGbD,EAHa,KAGND,EAHM,KAQpB,OAAO,yBAAKK,UAAU,aACpB,yBAAKa,GAAG,SACN,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASpB,WAAYG,EAAMkB,SAC3B,kBAAC,EAAD,CAAWnB,SAAUA,EAAUC,MAAOA,IACtC,kBAAC,EAAD,CAAUA,MAAOA,EAAOD,SAAUA,OAUzBmC,EALH,WAEV,OAAO,kBAAC,EAAD,OCxIWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.66144e4a.chunk.js","sourcesContent":["//PENTING: Jangan lupa setelah clone, jalankan `npm install` dulu lalu baru `npm run start`\n\n// Import React (penting!) dan hook yang kita gunakan\nimport React, { useState } from 'react';\n\n// Import komponen luar (seperti komponen UI framework) yang akan kita gunakan\nimport { Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\n\n// Import stylesheet luar agar kita bisa gunakan style\nimport \"./App.css\";\n\n// Stuktur data yang akan kita buat\n// const data = [\n//   {\n//     message: 'Cari makan',\n//     id: 1\n//   },\n//   {\n//     message: 'Belajar React',\n//     id: 2\n//   },\n//   {\n//     message: 'Belajar Lainnya',\n//     id: 3\n//   }\n// ];\n\n// Komponen Header\n// Return elemen Heeader\nconst Header = () => {\n  return <h1>Aplikasi Taskku\n    <span role=\"img\" aria-label=\"note\">📝</span>\n    </h1>\n}\n\n// Komponen Infobar\n// Menerima prop taskNumber\n// Return elemen InfoBar\nconst InfoBar = ({ taskNumber }) => {\n  return <div>Ada {taskNumber} yang perlu dikerjakan</div>\n};\n\n// Komponen TaskAdder: Untuk menambah task\n// Menerima prop: setTasks & tasks\n// Mereturn elemen TaskAdder\nconst TaskAdder = ({ setTasks, tasks }) => {\n  // State untuk menampung value pada input field\n  const [currentValue, setCurrentValue] = useState('');\n\n  // Handler (fungsi yang akan dilakukan jika pengguna melakukan\n  // tindakan pada input tersebut)\n  const handleAddTask = () => {\n    // Buat variabel baru untuk task yang akan kita tambahkan\n    const newTask = {\n      id: tasks.length + 1,\n      message: currentValue\n    };\n    // Set state tasks kita dengan merge array tasks yang lama dengan elemen task baru kita\n    setTasks([...tasks, newTask]);\n    // Set state currentValue kita biar kosong\n    setCurrentValue('');\n  }\n\n  return <div className=\"task-adder\">\n    {/* Kita gunakan komponen UI luar berdasarkan dokumentasi yang diberikan */}\n    <TextField\n      value={currentValue}\n      // Jika field berubah, maka...\n      onChange={event => setCurrentValue(event.target.value)}\n      label=\"Tambah task\"\n      variant=\"outlined\"\n    />\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      // Jika currentValue kosong maka disabled menjadi true (button tidak bisa digunakan)\n      disabled={currentValue === ''}\n      // Jika field berubah, maka...\n      onClick={() => handleAddTask()}>\n      Tambah\n    </Button>\n  </div>\n}\n\n// Komponen Task\n// Menerima prop message, id, setTasks, tasks\n// Mereturn elemen task\nconst Task = ({ message, id, setTasks, tasks }) => {\n\n  // Handler (fungsi yang akan dilakukan jika pengguna melakukan\n  // tindakan pada input tersebut)\n  const handleDelete = () => {\n    // Kita buat variabel baru untuk mendapatkan array yang sudah dihilangkan\n    // elemen yang memiliki id task yang akan dihapus\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    // Set value tasks dengan array yang sudah diupdate\n    setTasks(updatedTasks);\n  }\n  return <div className=\"container-task\">\n    <div className=\"task\">\n      <div style={{ display: \"inline-block\" }}>\n        {message}\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<DeleteIcon />}\n        onClick={() => handleDelete()}\n      >\n        Delete\n      </Button>\n    </div>\n  </div>\n}\n\n// Komponen TaskList\n// Menerima prop tasks dan setTasks\n// Mereturn komponen-komponen <Tasks />\nconst TaskList = ({ tasks, setTasks }) => {\n  // Lakukan iterasi pada setiap item pada array si tasks\n  // Di setiap item pada si tasks, kita akan return sebuah komponen <Task />\n  return tasks.map((task, index) => {\n    return <Task message={task.message} id={task.id} setTasks={setTasks} tasks={tasks} key={index} />\n  })\n}\n\nconst TaskApp = () => {\n  // Buat state untuk menampung value task-task kita, state ini akan menjadi\n  // sumber kebenaran untuk komponen yang kita buat\n  const [tasks, setTasks] = useState([]);\n\n  // Challenge: Bagaimana kalau kita ingin ambil data task-task kita dari luar, seperti dengan panggilan API?\n  // Clue: gunakan hook useEffect() dan http caller seperti fetch() atau axios\n\n  return <div className=\"container\">\n    <div id=\"child\">\n      <Header />\n      <InfoBar taskNumber={tasks.length} />\n      <TaskAdder setTasks={setTasks} tasks={tasks} />\n      <TaskList tasks={tasks} setTasks={setTasks} />\n    </div>\n  </div>\n};\n\nconst App = () => {\n  // Return komponen (halaman) kita di App\n  return <TaskApp />\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}